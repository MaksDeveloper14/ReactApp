{"version":3,"sources":["Loader/Loader.js","Table/Table.js","AddNewRowTable/AddNewRowTable.js","DetailRowView/DetailRowView.js","ModeSelector/ModeSelector.js","TableSearch/TableSearch.js","App.js","serviceWorker.js","index.js"],"names":["className","props","onClick","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","firstName","lastName","email","btn","marginBottom","type","style","add","value","person","defaultValue","description","address","streetAddress","city","state","zip","display","justifyContent","padding","onSelect","useState","setValue","onSearch","onChange","event","target","App","isModeSelected","isLoading","search","row","currentPage","clonedData","concat","_","orderBy","setState","modeSelectHandler","url","fetchData","addRow","alert","pageCnahgeHandler","selected","searchHandler","getFilteredData","filter","toLowerCase","includes","fetch","response","json","this","ModeSelector","filteredData","pageCount","Math","ceil","length","displayData","chunk","Fragment","TableSearch","AddNewRowTable","Table","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","DetailRowView","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0962f0d9.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\n// Экспортировали \nexport default () => (\n\t<div className=\"loader-wrap\">\n\t\t<div className=\"loadingio-spinner-eclipse-qv3a04ijgmf\"><div className=\"ldio-0o69o5915vpe\"><div></div></div></div>\n\t</div>\n)","import React from 'react';\n\nexport default props => (\n\t<table className=\"table\">\n\t\t<thead>\n\t    <tr>\n\t      <th onClick={props.onSort.bind(null, 'id')}>\n\t      \tID {props.sortField === 'id' ? <small>{props.sort}</small> : null}\n\t      </th>\n\t      <th onClick={props.onSort.bind(null, 'firstName')}>First Name {props.sortField === 'firstName' ? <small>{props.sort}</small> : null}</th>\n\t      <th onClick={props.onSort.bind(null, 'lastName')}>Last Name {props.sortField === 'lastName' ? <small>{props.sort}</small> : null}</th>\n\t      <th onClick={props.onSort.bind(null, 'email')}>Email {props.sortField === 'email' ? <small>{props.sort}</small> : null}</th>\n\t      <th onClick={props.onSort.bind(null, 'phone')}>Phone {props.sortField === 'phone' ? <small>{props.sort}</small> : null}</th>\n\t    </tr>\n  \t</thead>\n  \t<tbody>\n  \t{props.data.map(item => {\n  \t\treturn <tr key={item.id + item.phone} onClick={props.onRowSelect.bind(null, item)}>\n\t\t\t\t<td>{item.id}</td>\n\t\t\t\t<td>{item.firstName}</td>\n\t\t\t\t<td>{item.lastName}</td>\n\t\t\t\t<td>{item.email}</td>\n\t\t\t\t<td>{item.phone}</td>\n  \t\t</tr>\n  \t})}\n  \t</tbody>\n\t</table>\n)","import React from 'react';\n\n\nconst btn = {\n\tmarginBottom: '10px'\n}\n\nexport default props => {\n\treturn (<input type=\"button\" style={btn} onClick={()=>props.add()} value=\"Добавить\" />)\n}","import React from 'react';\n\nexport default ({person}) => (\n\t<div>\n\t\t<p>Выбран пользователь <b>{person.firstName + ' ' + person.lastName}</b></p>\n\t\t<p>\n\t\t\tОписание:\n\t\t\t<textarea defaultValue={person.description} />\n\t\t</p>\n\n\t\t<p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\n\t\t<p>Город: <b>{person.address.city}</b></p>\n\t\t<p>Провинция/штат: <b>{person.address.state}</b></p>\n\t\t<p>Индекс: <b>{person.address.zip}</b></p>\n\t</div>\n)\n\n\n","import React from 'react';\n\nexport default props => {\n\n\tconst smallUrl = `http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`;\n\n\tconst bigUrl = `http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`;\n\n\treturn (\n\t\t<div style={{display: 'flex', justifyContent: 'center', padding: '50px 0'}}>\n\t\t\t<button onClick={() => props.onSelect(smallUrl)} className=\"btn btn-success\">32 элемента</button>\n\t\t\t<button onClick={() => props.onSelect(bigUrl)} className=\"btn btn-danger\">1000 элементов</button>\n\t\t</div>\n\t)\n}","import React, {useState} from 'react';\n\nexport default props => {\n\n\tconst [value, setValue] = useState('')\n\n\tconst valueChangeHandler = event => {\n\t\tsetValue(event.target.value);\n\t}\n\n\treturn (\n\t\t<div className=\"input-group mb-3\">\n\t\t  <div className=\"input-group-prepend\">\n\t\t    <button \n\t\t    \tclassName=\"btn btn-outline-secondary\"\n\t\t    \tonClick={() => props.onSearch(value)}>Seacrh</button>\n\t\t  </div>\n\t\t  <input \n\t\t  \ttype=\"text\" \n\t\t  \tclassName=\"form-control\" \n\t\t  \tonChange={valueChangeHandler}\n\t\t  \tvalue={value}\n\t\t  />\n\t\t</div>\n\t)\n}","// Импортируем компоненты\nimport React from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport Loader from \"./Loader/Loader\";\nimport Table from \"./Table/Table\";\nimport AddNewRowTable from \"./AddNewRowTable/AddNewRowTable\";\nimport DetailRowView from \"./DetailRowView/DetailRowView\";\nimport ModeSelector from \"./ModeSelector/ModeSelector\";\nimport TableSearch from \"./TableSearch/TableSearch\";\nimport _ from \"lodash\";\n\n// Наше приложение наследует от React.Component\nclass App extends React.Component {\n  // В state переносим те вещи, которые мы динамически меняем\n  state = {\n    isModeSelected: false,\n    isLoading: false,\n    data: [],\n    search: \"\",\n    sort: \"asc\", // desc\n    sortField: \"id\",\n    row: null,\n    currentPage: 0\n  };\n\n  async fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\n    });\n  }\n\n  onSort = (sortField) => {\n    const clonedData = this.state.data.concat();\n    const sort = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\n\n    const data = _.orderBy(clonedData, sortField, sort);\n\n    this.setState({\n      data: data,\n      sort: sort,\n      sortField: sortField\n    });\n\n    // можно опустить значение\n    this.setState({ data, sort, sortField });\n  };\n\n  modeSelectHandler = (url) => {\n    this.setState({\n      isModeSelected: true,\n      isLoading: true\n    });\n\n    this.fetchData(url);\n  };\n\n  onRowSelect = (row) => {\n    this.setState({ row });\n  };\n\n  addRow = () => {\n    alert(\"Нажатие на кнопку добавить\");\n  };\n\n  pageCnahgeHandler = ({ selected }) => {\n    this.setState({ currentPage: selected });\n  };\n\n  searchHandler = (search) => {\n    this.setState({ search, currentPage: 0 });\n  };\n\n  getFilteredData = () => {\n    const { data, search } = this.state;\n\n    if (!search) {\n      return data;\n    }\n\n    return data.filter((item) => {\n      return (\n        item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"email\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"phone\"].toLowerCase().includes(search.toLowerCase())\n      );\n    });\n  };\n\n  // Здесь показываем наше приложение\n  render() {\n    const pageSize = 50;\n    if (!this.state.isModeSelected) {\n      return (\n        <div className=\"container\">\n          <ModeSelector onSelect={this.modeSelectHandler} />\n        </div>\n      );\n    }\n\n    const filteredData = this.getFilteredData();\n\n    const pageCount = Math.ceil(filteredData.length / pageSize);\n\n    const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage];\n\n    return (\n      <div className=\"container\">\n        {this.state.isLoading ? (\n          <Loader />\n        ) : (\n          <React.Fragment>\n            <TableSearch onSearch={this.searchHandler} />\n            <AddNewRowTable add={this.addRow} />\n            <Table\n              data={displayData}\n              onSort={this.onSort}\n              sort={this.state.sort}\n              sortField={this.state.sortField}\n              onRowSelect={this.onRowSelect}\n            />\n          </React.Fragment>\n        )}\n\n        {this.state.data.length > pageSize ? (\n          <ReactPaginate\n            previousLabel={\"<\"}\n            nextLabel={\">\"}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={pageCount}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            onPageChange={this.pageCnahgeHandler}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            pageClassName=\"page-item\"\n            pageLinkClassName=\"page-link\"\n            previousClassName=\"page-item\"\n            nextClassName=\"page-item\"\n            previousLinkClassName=\"page-link\"\n            nextLinkClassName=\"page-link\"\n            forcePage=\"{this.state.currentPage}\"\n          />\n        ) : null}\n\n        {this.state.row ? <DetailRowView person={this.state.row} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}